# main()
snippet main
	/**
	 * ${1:Entry point}
	 **/
	int
	main(int argc, char *argv[])
	{
		${2}
		return 0;
	}
# snippet mainn
# 	int main(void)
# 	{
# 		${1}
# 		return 0;
# 	}
# #include <...>
snippet inc #1 library
	#include <${1:stdio}.h>
	${2}
# #include "..."
snippet inc #2 filename
	#include "${1:`Filename("$1.h")`}"
	${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	} ${3}
snippet el
	else${1: if}
	{
		${2}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
	{
		${5:/* code */}
	}
# Function
snippet fun
	/**
	 * ${1: doc}
	 *
	 * @param ${2:param-name} ${3:param-description}
	 * @return ${4:return}
	 **/
	${5:void}
	${6:function_name}(${7:type} $2)
	{
		${8:/* code */}
	}
# Function Declaration
snippet fd
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct Declaration
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	/**
	 * A structure to represent ${1:something}
	 */
	typedef struct ${3:_$2 }
	{
		${4:/* data */}
	} ${2:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# This is kind of convenient
snippet .
	[${1}]${2}
# For Doxygen
snippet ///
	/**
	 * @file
	 * @author ${1: Nikos Vasilakis}
	 * @version ${2:0.1}
	 *
	 * @section Description
	 *
	 * ${3: Short}
	 **/
	
	${4}
# Simple Doxygen
snippet //
	/**
	 * ${1:}
	 */
	${2}
